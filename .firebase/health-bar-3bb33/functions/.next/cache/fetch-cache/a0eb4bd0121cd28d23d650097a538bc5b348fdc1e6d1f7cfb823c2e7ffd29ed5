{"kind":"FETCH","data":{"headers":{"connection":"keep-alive","content-length":"78603","content-type":"application/json; charset=utf-8","date":"Wed, 07 Aug 2024 08:12:57 GMT","server":"RapidAPI-1.2.8","x-apidev-server":"3","x-rapidapi-region":"AWS - eu-central-1","x-rapidapi-request-id":"7c9269f06c63e31decaa0faa2e7147c71f8f1c073177f78b22c8f999557d816a","x-rapidapi-version":"1.2.8","x-ratelimit-rapid-free-plans-hard-limit-limit":"500000","x-ratelimit-rapid-free-plans-hard-limit-remaining":"499986","x-ratelimit-rapid-free-plans-hard-limit-reset":"1218343","x-ratelimit-requests-limit":"25","x-ratelimit-requests-remaining":"11","x-ratelimit-requests-reset":"1218343"},"body":"{
    "status": "success",
    "items": [
        {
            "title": "First human case of West Nile virus in MA confirmed in Hampden County",
            "snippet": "A Hampden County man was confirmed to have West Nile virus (WNV), the first confirmed human case in the state for 2024.",
            "publisher": "WWLP.com",
            "timestamp": "1722981038000",
            "newsUrl": "https://www.wwlp.com/news/local-news/hampden-county/first-human-case-of-west-nile-virus-in-ma-confirmed-in-hampden-county/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUVUM2RxWjFwb1NEQXpNV3hXVFJDZkF4ampCU2dLTWdZcEpZck5uUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUVUM2RxWjFwb1NEQXpNV3hXVFJDZkF4ampCU2dLTWdZcEpZck5uUWM"
            },
            "hasSubnews": true,
            "subnews": [
                {
                    "title": "First human case of West Nile reported in Massachusetts",
                    "snippet": "The Massachusetts Department of Public Health announced the first case human case of West Nile virus and the first animal case of EEE in the state this ...",
                    "publisher": "Turn to 10",
                    "timestamp": "1722977329000",
                    "newsUrl": "https://turnto10.com/news/local/first-human-case-of-west-nile-reported-in-massachusetts-southern-new-england-rhode-island-eee-hampden-county-august-6-2024",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNWpjbkI0U2s1R04zVkRUbko0VFJDZkF4amlCU2dLTWdPaHBBNA=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNWpjbkI0U2s1R04zVkRUbko0VFJDZkF4amlCU2dLTWdPaHBBNA"
                    }
                },
                {
                    "title": "Two towns south of Boston now have ‘high’ EEE risk, state says",
                    "snippet": "Authorities warn residents in some South Shore towns to be aware of a mosquito-borne illness called Eastern equine encephalitis (EEE).",
                    "publisher": "Boston.com",
                    "timestamp": "1722824682000",
                    "newsUrl": "https://www.boston.com/news/health/2024/08/04/two-towns-south-of-boston-now-have-high-eee-risk-state-says/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNTFkMUV5UWtaeVkwWXdTRUp1VFJEYUF4aUhCU2dLTWdZZFZKcU5vUWs=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNTFkMUV5UWtaeVkwWXdTRUp1VFJEYUF4aUhCU2dLTWdZZFZKcU5vUWs"
                    }
                },
                {
                    "title": "First human case of West Nile virus, first animal case of EEE confirmed, state says",
                    "snippet": "A mosquito was crushed on a man's arm after a bite. A Western Massachusetts man has become the state's first confirmed human case of West Nile virus.",
                    "publisher": "The Boston Globe",
                    "timestamp": "1722973800000",
                    "newsUrl": "https://www.bostonglobe.com/2024/08/06/metro/first-human-case-west-nile-virus-first-animal-case-eee-confirmed-state-says/"
                },
                {
                    "title": "Two Massachusetts towns now at high risk of human EEE infection in 2024",
                    "snippet": "Two Massachusetts towns have a high risk of EEE infection in humans for the first time in 2024.",
                    "publisher": "WJAC Johnstown",
                    "timestamp": "1722637108000",
                    "newsUrl": "https://wjactv.com/news/nation-world/two-massachusetts-towns-now-at-high-risk-of-human-eee-infection-in-2024-",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNWpjbkI0U2s1R04zVkRUbko0VFJDZkF4amlCU2dLTWdPaHBCQQ=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNWpjbkI0U2s1R04zVkRUbko0VFJDZkF4amlCU2dLTWdPaHBCQQ"
                    }
                },
                {
                    "title": "EEE risk level now high in two Mass. towns, state health department says",
                    "snippet": "The Massachusetts Department of Health raised the Eastern equine encephalitis risk level to high in two towns on Friday after mosquito samples collected in ...",
                    "publisher": "MassLive.com",
                    "timestamp": "1722785040000",
                    "newsUrl": "https://www.masslive.com/news/2024/08/eee-risk-level-now-high-in-two-mass-towns-state-health-department-says.html",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVBWRE5wUkRWRGRqaENlVFpuVFJERkF4aWxCU2dLTWdhdG9vNVBQUVk=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVBWRE5wUkRWRGRqaENlVFpuVFJERkF4aWxCU2dLTWdhdG9vNVBQUVk"
                    }
                }
            ]
        },
        {
            "title": "These 17 cancer types are more common in Gen X and millennials, as study notes 'alarming trend'",
            "snippet": "Certain types of cancers are more prevalent among Gen X and millennials, according to a new study led by the American Cancer Society.",
            "publisher": "Fox News",
            "timestamp": "1722888420000",
            "newsUrl": "https://www.foxnews.com/health/17-cancer-types-more-common-gen-x-millennials-study-finds-alarming-trend",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNHdhV1JzWkVwTGIzbDJOM1ZDVFJDZkF4ampCU2dLTWdhcFFZYnpIQWc=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNHdhV1JzWkVwTGIzbDJOM1ZDVFJDZkF4ampCU2dLTWdhcFFZYnpIQWc"
            },
            "hasSubnews": true,
            "subnews": [
                {
                    "title": "Millennials and Gen Xers face higher risk of 17 cancers than previous generations, study suggests",
                    "snippet": "As cancer cases rise among young adults in the United States, a new study has identified 17 cancer types that appear to be more common in Generation X and ...",
                    "publisher": "CNN",
                    "timestamp": "1722465000000",
                    "newsUrl": "https://www.cnn.com/2024/07/31/health/millennials-gen-x-cancer-risk-study/index.html",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNW1SbmxMT0VrM1JWcEdaMlJOVFJDZkF4amlCU2dLTWdrWkJZak5nYTJTTXdF=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNW1SbmxMT0VrM1JWcEdaMlJOVFJDZkF4amlCU2dLTWdrWkJZak5nYTJTTXdF"
                    }
                },
                {
                    "title": "Scientists Sound Alarms on New Surge in Cancers and a Private Spacewalk is Pushed Back",
                    "snippet": "A new blood test for cancer, helpful cat parasites, and a new kind of wood in this week's news roundup.",
                    "publisher": "Scientific American",
                    "timestamp": "1722852225000",
                    "newsUrl": "https://www.scientificamerican.com/podcast/episode/cancer-case-rates-are-rising-across-generations-and-a-spacex-private/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNTNjVVJtUVVFdFdrRm9WVkpNVFJEU0FoallCQ2dLTWdrbE5ZU3R6V0p6WndJ=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNTNjVVJtUVVFdFdrRm9WVkpNVFJEU0FoallCQ2dLTWdrbE5ZU3R6V0p6WndJ"
                    }
                },
                {
                    "title": "Gen X and millennials at higher cancer risk than older generations",
                    "snippet": "Generation X and millennials are at an increased risk of developing certain cancers compared with older generations, a shift that is probably due to ...",
                    "publisher": "The Washington Post",
                    "timestamp": "1722490200000",
                    "newsUrl": "https://www.washingtonpost.com/wellness/2024/07/31/cancer-rates-younger-generations/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNHlZVTVIY1hkdldGRkNhbFZDVFJEQkF4aXJCU2dLTWdtQlVZN0RPcVdhelFF=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNHlZVTVIY1hkdldGRkNhbFZDVFJEQkF4aXJCU2dLTWdtQlVZN0RPcVdhelFF"
                    }
                },
                {
                    "title": "American Cancer Society says cancer hitting Gen X, millennials",
                    "snippet": "Why are younger people getting cancer? Why is colorectal and breast cancer on the rise in younger adults? What is the most common cancer? Read more.",
                    "publisher": "Deseret News",
                    "timestamp": "1722545481000",
                    "newsUrl": "https://www.deseret.com/u-s-world/2024/08/01/gen-x-millennials-more-cancer-than-older-generations/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXhlRGxQU21oSlZYWlBjRXQ0VFJDM0FSaVRBaWdCTWdiRmdJaldyQWM=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXhlRGxQU21oSlZYWlBjRXQ0VFJDM0FSaVRBaWdCTWdiRmdJaldyQWM"
                    }
                },
                {
                    "title": "Gen X, millennials more likely to get cancer, new study shows",
                    "snippet": "Adults in their 30s, 40s and 50s are far more likely than their parents were to develop 17 different types of cancers, per the new study.",
                    "publisher": "Axios",
                    "timestamp": "1722465126000",
                    "newsUrl": "https://www.axios.com/2024/07/31/gen-x-millennials-cancer-increase",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUpOR2hsWlRkNWVWcHpNbTFxVFJDZkF4ampCU2dLTWdhcEVvUU5XZ00=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUpOR2hsWlRkNWVWcHpNbTFxVFJDZkF4ampCU2dLTWdhcEVvUU5XZ00"
                    }
                }
            ]
        },
        {
            "title": "CDC issues new guidelines for RSV vaccines, citing side-effect concerns",
            "snippet": "The CDC has clarified and narrowed its recommendations for which older adults should get an RSV vaccine.",
            "publisher": "Livescience.com",
            "timestamp": "1722972963000",
            "newsUrl": "https://www.livescience.com/health/medicine-drugs/cdc-issues-new-guidelines-for-rsv-vaccines-citing-side-effect-concerns",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNVlVRWh4Y3poTVUyRlhRV000VFJDMEFSakFBaWdLTWdrUkFLQ25pcXNXNVFJ=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNVlVRWh4Y3poTVUyRlhRV000VFJDMEFSakFBaWdLTWdrUkFLQ25pcXNXNVFJ"
            },
            "hasSubnews": false
        },
        {
            "title": "Nutritionist Reveals How to Enhance Gut Health by Boosting Good Bacteria and Reducing Bad Bacteria",
            "publisher": "NDTV",
            "timestamp": "1722931292000",
            "newsUrl": "https://www.ndtv.com/health/nutritionist-reveals-how-to-enhance-gut-health-by-boosting-good-bacteria-and-reducing-bad-bacteria-6274734",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNHdSbnBET1hNemEzRmhRak0zVFJDeUF4akNCU2dLTWdhcEpJcXVvUVU=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNHdSbnBET1hNemEzRmhRak0zVFJDeUF4akNCU2dLTWdhcEpJcXVvUVU"
            },
            "hasSubnews": false
        },
        {
            "title": "New Biomaterial Mimics, Regenerates Knee Cartilage",
            "snippet": "New biomaterial that replaces and regenerates knee cartilage could be used to treat osteoarthritis and make total knee replacement surgery obsolete.",
            "publisher": "Newsmax",
            "timestamp": "1722952858000",
            "newsUrl": "https://www.newsmax.com/health/health-news/knee-cartilage-biomaterial/2024/08/06/id/1175423/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iKENnNVViekZCWkVrMlozTklWWGhNVFJCa0dIZ29DaklHb1RXSTY3VUU=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iKENnNVViekZCWkVrMlozTklWWGhNVFJCa0dIZ29DaklHb1RXSTY3VUU"
            },
            "hasSubnews": true,
            "subnews": [
                {
                    "title": "New biomaterial might help replace cartilage lost to arthritis",
                    "snippet": "A newly developed biomaterial might be able to treat crippling arthritis by prompting the growth of new cartilage, a new study suggests.",
                    "publisher": "UPI News",
                    "timestamp": "1722951377000",
                    "newsUrl": "https://www.upi.com/Health_News/2024/08/06/new-biomaterial-replace-cartilage-arthritis-knees/5461722949287/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXlUVjlVTTFsMWVXTXRVMGRTVFJEREF4aW5CU2dLTWdhZEJvWUtyZ1E=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXlUVjlVTTFsMWVXTXRVMGRTVFJEREF4aW5CU2dLTWdhZEJvWUtyZ1E"
                    }
                },
                {
                    "title": "New biomaterial regrows damaged cartilage in joints",
                    "snippet": "Northwestern University scientists have developed a new bioactive material that successfully regenerated high-quality cartilage in the knee joints of a ...",
                    "publisher": "Medical Xpress",
                    "timestamp": "1722884401000",
                    "newsUrl": "https://medicalxpress.com/news/2024-08-biomaterial-regrows-cartilage-joints.html",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iMkNnNVJhRkJFUW1saGJqVlNTa1J2VFJEWkF4aUlCU2dLTWdzQkVJcW5GT1U4RmxteW9R=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iMkNnNVJhRkJFUW1saGJqVlNTa1J2VFJEWkF4aUlCU2dLTWdzQkVJcW5GT1U4RmxteW9R"
                    }
                },
                {
                    "title": "Injectable goo could fix joints without surgery, early study suggests",
                    "snippet": "New research shows that an injectable goo can repair cartilage damage in animals' joints within six months. Scientists are now developing the tech for use ...",
                    "publisher": "Livescience.com",
                    "timestamp": "1722884400000",
                    "newsUrl": "https://www.livescience.com/health/medicine-drugs/injectable-goo-could-fix-joints-without-surgery-early-study-suggests",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iMkNnNWlVbUZrV0VwallWQnpaRmxzVFJDZkF4ampCU2dLTWdzQkFJaW1rS1FzOXdoWDRB=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iMkNnNWlVbUZrV0VwallWQnpaRmxzVFJDZkF4ampCU2dLTWdzQkFJaW1rS1FzOXdoWDRB"
                    }
                },
                {
                    "title": "Rapidly regrowing cartilage with 'dancing molecules' and 'rubbery goo'",
                    "snippet": "Two innovative new developments have demonstrated that degraded cartilage can be regrown, first with 'dancing molecules' that target the protein needed for ...",
                    "publisher": "New Atlas",
                    "timestamp": "1723010674000",
                    "newsUrl": "https://newatlas.com/medical/dancing-molecules-cartilage/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iMkNnNWtaazF6V0hCYVVFWllhbUp0VFJERUF4aW1CU2dLTWdzQkFJckZsS1UwTlNtMm9R=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iMkNnNWtaazF6V0hCYVVFWllhbUp0VFJERUF4aW1CU2dLTWdzQkFJckZsS1UwTlNtMm9R"
                    }
                },
                {
                    "title": "A common skincare ingredient could help humans regrow knee cartilage",
                    "snippet": "After testing their bioactive material in sheep, researchers are optimistic about developing an alternative to invasive open-joint surgery.",
                    "publisher": "Courthouse News Service",
                    "timestamp": "1722884488000",
                    "newsUrl": "https://www.courthousenews.com/a-common-skincare-ingredient-could-help-humans-regrow-knee-cartilage/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iMkNnNVVRbVZCWmt4SU0yZEtTRGhFVFJEWkF4aUlCU2dLTWdzQkVJcW5GT1U4RmtteW9R=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iMkNnNVVRbVZCWmt4SU0yZEtTRGhFVFJEWkF4aUlCU2dLTWdzQkVJcW5GT1U4RmtteW9R"
                    }
                },
                {
                    "title": "3 BRILLIANT MINUTES: Growing cartilage",
                    "snippet": "In this segment, we ...",
                    "publisher": "WBAY",
                    "timestamp": "1722982920000",
                    "newsUrl": "https://www.wbay.com/2024/08/06/3-brilliant-minutes-growing-cartilage/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNTZNbWd0UzFNelJtSkZYM2g1VFJDSEF4aVBCaWdLTWdtQkFKcVlpT3ZJNVFJ=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNTZNbWd0UzFNelJtSkZYM2g1VFJDSEF4aVBCaWdLTWdtQkFKcVlpT3ZJNVFJ"
                    }
                }
            ]
        },
        {
            "title": "First West Nile death of 2024 reported in Dallas County",
            "snippet": "Dallas County announced its first West Nile virus death of 2024.",
            "publisher": "The Dallas Morning News",
            "timestamp": "1722973555000",
            "newsUrl": "https://www.dallasnews.com/news/public-health/2024/08/06/dallas-county-reports-first-west-nile-death-of-2024/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUtkRFJRUTBreVVWaGtURFJzVFJDZkF4amlCU2dLTWdZVkU0eU5KUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUtkRFJRUTBreVVWaGtURFJzVFJDZkF4amlCU2dLTWdZVkU0eU5KUWM"
            },
            "hasSubnews": true,
            "subnews": [
                {
                    "title": "Dallas County woman dies from West Nile virus",
                    "snippet": "A woman from North Dallas died recently after contracting West Nile from mosquitoes.",
                    "publisher": "FOX 4 News Dallas-Fort Worth",
                    "timestamp": "1722964180000",
                    "newsUrl": "https://www.fox4news.com/news/dallas-county-woman-dies-from-west-nile-virus",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVZSelI2YWs5QlkzWkdVUzF4VFJDZkF4ampCU2dLTWdhRmtaS3VRUVk=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVZSelI2YWs5QlkzWkdVUzF4VFJDZkF4ampCU2dLTWdhRmtaS3VRUVk"
                    }
                },
                {
                    "title": "Dallas woman dies after contracting West Nile Virus",
                    "snippet": "DALLAS – A Dallas woman has died from West Nile Virus, the first death related to the mosquito-borne virus in Dallas County this year.",
                    "publisher": "CBS News",
                    "timestamp": "1722992071000",
                    "newsUrl": "https://www.cbsnews.com/texas/news/dallas-woman-dies-west-nile-virus/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNHRSM055UW5sblNrZDBlbWQxVFJDUkF4ajhCU2dLTWdZcFZaYk5KUWc=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNHRSM055UW5sblNrZDBlbWQxVFJDUkF4ajhCU2dLTWdZcFZaYk5KUWc"
                    }
                },
                {
                    "title": "The nation's first 2024 West Nile Virus death recorded in Dallas County",
                    "snippet": "The patient lived in the 75230 zip code, which includes North Dallas.",
                    "publisher": "Axios",
                    "timestamp": "1722981668000",
                    "newsUrl": "https://www.axios.com/local/dallas/2024/08/06/dallas-county-west-nile-virus-death-2024",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNTZOMnBCVTJoNFgxSXRRbFppVFJDZkF4ampCU2dLTWdZaEpZck56UU0=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNTZOMnBCVTJoNFgxSXRRbFppVFJDZkF4ampCU2dLTWdZaEpZck56UU0"
                    }
                },
                {
                    "title": "First West Nile Virus death reported in Dallas County this year",
                    "snippet": "DALLAS — Dallas County Health and Human Services has reported the first death from West Nile Virus in the county this year.",
                    "publisher": "WFAA.com",
                    "timestamp": "1722962880000",
                    "newsUrl": "https://www.wfaa.com/article/news/local/dallas-county/first-west-nile-virus-death-reported-dallas-county/287-5aca5d66-9e0c-4853-93d4-fb437c60443a",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNTZhRmRNVmxGek16WXhRMnRLVFJDZkF4ampCU2dLTWdrVllwWVNNU2VpS1FJ=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNTZhRmRNVmxGek16WXhRMnRLVFJDZkF4ampCU2dLTWdrVllwWVNNU2VpS1FJ"
                    }
                },
                {
                    "title": "Carrollton reports five positive West Nile cases in mosquitoes",
                    "snippet": "Dallas County Health and Human Services has confirmed five mosquito samples testing positive for the West Nile Virus (WNV) in Carrollton.",
                    "publisher": "Star Local Media",
                    "timestamp": "1722439800000",
                    "newsUrl": "https://starlocalmedia.com/carrolltonleader/news/carrollton-reports-five-positive-west-nile-cases-in-mosquitoes/article_459ced5e-4dcf-11ef-a2bf-8f9e215c59e6.html",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUVhV04xT0dJdGNsWXhla3BKVFJDQkFoaVFBeWdLTWdheHdveFJ3UVU=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUVhV04xT0dJdGNsWXhla3BKVFJDQkFoaVFBeWdLTWdheHdveFJ3UVU"
                    }
                },
                {
                    "title": "Dallas County reports first West Nile virus death this year",
                    "snippet": "Dallas County Health and Human Services is reporting its first human death from West Nile virus this year. The county said an unidentified woman from the ...",
                    "publisher": "KERA News",
                    "timestamp": "1722984660000",
                    "newsUrl": "https://www.keranews.org/health-wellness/2024-08-06/dallas-county-reports-first-west-nile-virus-death-this-year",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXBNVWhIVDE5TE1HZ3pWVFZ4VFJDMkFSaVZBaWdCTWdZcHM0WlB6UU0=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXBNVWhIVDE5TE1HZ3pWVFZ4VFJDMkFSaVZBaWdCTWdZcHM0WlB6UU0"
                    }
                }
            ]
        },
        {
            "title": "How to lower or eliminate your risk of knee arthritis, according to a new study",
            "snippet": "Developing stronger leg muscles could help slow or prevent knee osteoarthritis, a new study found. Performing strength training to build muscle mass is key.",
            "publisher": "CNN",
            "timestamp": "1722958920000",
            "newsUrl": "https://www.cnn.com/2024/08/06/health/knee-arthritis-leg-strength-training-wellness/index.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNWxNeTF0T1ZoTmVHNXNPSGcxVFJDZkF4amlCU2dLTWdhcEpaVE5GUW8=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNWxNeTF0T1ZoTmVHNXNPSGcxVFJDZkF4amlCU2dLTWdhcEpaVE5GUW8"
            },
            "hasSubnews": false
        },
        {
            "title": "Deadlier strain of mpox spreads to multiple African countries",
            "snippet": "An unprecedented outbreak of mpox that has been raging in the Democratic Republic of the Congo (DRC) over the past several months has, as feared, ...",
            "publisher": "Science",
            "timestamp": "1722716400000",
            "newsUrl": "https://www.science.org/content/article/deadlier-strain-mpox-spreads-more-african-countries",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNTJOVkpsVFUxNExVWTNRVGRoVFJDWEJCaS1CQ2dLTWdrQkVJeUVwbVlXNlFF=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNTJOVkpsVFUxNExVWTNRVGRoVFJDWEJCaS1CQ2dLTWdrQkVJeUVwbVlXNlFF"
            },
            "hasSubnews": true,
            "subnews": [
                {
                    "title": "Alarm Bells Ring in Africa Over Virulent New Mpox Strain",
                    "snippet": "Welcome to Next Africa, a twice-weekly newsletter on where the continent stands now — and where it's headed. Sign up here to have it delivered to your ...",
                    "publisher": "Bloomberg",
                    "timestamp": "1722946950000",
                    "newsUrl": "https://www.bloomberg.com/news/newsletters/2024-08-06/next-africa-alarm-bells-ring-over-virulent-new-mpox-strain",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iMkNnNUdTV0ZaV1ZwWmRqaG1USEZQVFJERUF4aW1CU2dLTWdzQkFJNGxFR2dWMEptWTRB=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iMkNnNUdTV0ZaV1ZwWmRqaG1USEZQVFJERUF4aW1CU2dLTWdzQkFJNGxFR2dWMEptWTRB"
                    }
                },
                {
                    "title": "WHO warns on deadlier strain of mpox",
                    "snippet": "The World Health Organization is weighing discussions on whether to declare an international public health emergency as a deadlier strain of mpox spreads in ...",
                    "publisher": "Axios",
                    "timestamp": "1722935203000",
                    "newsUrl": "https://www.axios.com/2024/08/05/mpox-who-warning-africa",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXNTalJ0TTFjNVlVSXpWR0ppVFJDZkF4ampCU2dLTWdhRmNvNHhwUWM=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXNTalJ0TTFjNVlVSXpWR0ppVFJDZkF4ampCU2dLTWdhRmNvNHhwUWM"
                    }
                },
                {
                    "title": "WHO, CDC, consider declaring mpox international public health emergency",
                    "snippet": "A deadlier strain of mpox gaining traction in Africa may prompt an international public health emergency declaration from WHO and the U.S. CDC.",
                    "publisher": "New York Daily News",
                    "timestamp": "1722914675000",
                    "newsUrl": "https://www.nydailynews.com/2024/08/05/who-cdc-consider-declaring-mpox-international-public-health-emergency/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXhha05wWlVaWFNFZGxUa1pNVFJEZEFoaVhBeWdLTWdhWllaNVJKUW8=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXhha05wWlVaWFNFZGxUa1pNVFJEZEFoaVhBeWdLTWdhWllaNVJKUW8"
                    }
                },
                {
                    "title": "Mpox cases spiking in 10 African nations",
                    "snippet": "In a report released this week, the Africa Centers for Disease Control and Prevention (Africa CDC) said mpox cases have risen by 160% on the continent this ...",
                    "publisher": "University of Minnesota Twin Cities",
                    "timestamp": "1722623350000",
                    "newsUrl": "https://www.cidrap.umn.edu/mpox/mpox-cases-spiking-10-african-nations",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUlRazAwU2tsVFYzQjJTVWhWVFJDM0FSaVVBaWdCTWdZQkVJaUZKZ2M=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUlRazAwU2tsVFYzQjJTVWhWVFJDM0FSaVVBaWdCTWdZQkVJaUZKZ2M"
                    }
                },
                {
                    "title": "WHO chief poised to declare international health emergency as mpox spreads in Africa",
                    "snippet": "The chief of the World Health Organisation is considering convening an expert committee for advice on whether Africa's growing mpox outbreak in Africa ...",
                    "publisher": "The Telegraph",
                    "timestamp": "1722873720000",
                    "newsUrl": "https://www.telegraph.co.uk/global-health/science-and-disease/who-poised-to-declare-international-health-emergency-as-mpo/",
                    "images": {
                        "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNW9XRlpCUkc1MVkwcEZWMkp2VFJDcEF4aW9CU2dLTWdhQlU1UnZKUWc=-w280-h168-p-df-rw",
                        "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNW9XRlpCUkc1MVkwcEZWMkp2VFJDcEF4aW9CU2dLTWdhQlU1UnZKUWc"
                    }
                }
            ]
        },
        {
            "title": "U.S. Medical Eligibility Criteria for Contraceptive Use, 2024",
            "snippet": "This report describes new and revised recommendations for the use of specific contraceptive methods by people who have certain characteristics or medical ...",
            "publisher": "CDC",
            "timestamp": "1722987691000",
            "newsUrl": "https://www.cdc.gov/mmwr/volumes/73/rr/rr7304a1.htm",
            "hasSubnews": false
        },
        {
            "title": "Newly approved blood test can help catch colon cancer",
            "snippet": "Doctors are hopeful that a new blood test will help improve screening numbers for colorectal cancer.",
            "publisher": "WOODTV.com",
            "timestamp": "1722883631000",
            "newsUrl": "https://www.woodtv.com/news/grand-rapids/newly-approved-blood-test-can-help-catch-colon-cancer/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNURVRk5OU0dGbE5XOXdMVUY2VFJDZkF4ampCU2dLTWdNQmNBZw=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNURVRk5OU0dGbE5XOXdMVUY2VFJDZkF4ampCU2dLTWdNQmNBZw"
            },
            "hasSubnews": false
        },
        {
            "title": "World Health Organization reveals 30 pathogens most likely to trigger next pandemic",
            "snippet": "More than half of the entries are new, including monkeypox , mosquito-borne dengue virus and the bird flu that is currently causing an outbreak among ...",
            "publisher": "Daily Mail",
            "timestamp": "1722873901000",
            "newsUrl": "https://www.dailymail.co.uk/health/article-13710267/who-updates-pandemic-causing-viruses-bacteria-pathogens-list.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNWlUR3RqZG5adlozVldRWGxrVFJDZkF4ampCU2dLTWdNQkFEdw=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNWlUR3RqZG5adlozVldRWGxrVFJDZkF4ampCU2dLTWdNQkFEdw"
            },
            "hasSubnews": false
        },
        {
            "title": "First case of chronic wasting disease found in deer in Washington State",
            "snippet": "For the first time a deer with chronic wasting disease was found in Washington State.",
            "publisher": "KIRO Seattle",
            "timestamp": "1722911940000",
            "newsUrl": "https://www.kiro7.com/news/local/first-case-chronic-wasting-disease-found-deer-washington-state/LMBITBANPFF3XPLLRUNC7RJNII/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNU9PRnBaUzA0d05pMTJRa3BLVFJDZkF4ampCU2dLTWdZWlJJRE5vUVU=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNU9PRnBaUzA0d05pMTJRa3BLVFJDZkF4ampCU2dLTWdZWlJJRE5vUVU"
            },
            "hasSubnews": false
        },
        {
            "title": "A diet high in fruits and vegetables may reduce your heart and kidney disease risk, study says",
            "snippet": "Fruits and vegetables are without question an important part of nutrition — but a new study shows how important they are to chronic disease prevention.",
            "publisher": "CNN",
            "timestamp": "1722967440000",
            "newsUrl": "https://www.cnn.com/2024/08/06/health/fruits-vegetables-heart-kidney-disease-wellness/index.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNDRNM2M0YUhwdWN6TmtUWEY0VFJERUF4aW1CU2dLTWdZQkFJRDBOQVk=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNDRNM2M0YUhwdWN6TmtUWEY0VFJERUF4aW1CU2dLTWdZQkFJRDBOQVk"
            },
            "hasSubnews": false
        },
        {
            "title": "Study Puts a $43 Billion Yearly Price Tag on Cancer Screening",
            "snippet": "The United States spent $43 billion annually on screening to prevent five cancers, according to one of the most comprehensive estimates of medically ...",
            "publisher": "The New York Times",
            "timestamp": "1722891746000",
            "newsUrl": "https://www.nytimes.com/2024/08/05/health/cancer-screening-tests-cost.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVRTa1JuWTFKRFptNXBaMjVXVFJDUUF4allCQ2dLTWdZQmNJcXRNQWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVRTa1JuWTFKRFptNXBaMjVXVFJDUUF4allCQ2dLTWdZQmNJcXRNQWM"
            },
            "hasSubnews": false
        },
        {
            "title": "Ozempic patients may face dangerous risks during surgery, doctors warn",
            "snippet": "Patients who are taking GLP-1 medications including Ozempic, Wegovy, Mounjaro and others could face complications during surgery, recent research has shown.",
            "publisher": "Fox News",
            "timestamp": "1722933000000",
            "newsUrl": "https://www.foxnews.com/health/ozempic-patients-may-face-dangerous-risks-surgery-doctors-warn",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVJPRWxMT0hSb1NqSTJNVXd4VFJDZkF4ampCU2dLTWdZVklwcG9sZ28=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVJPRWxMT0hSb1NqSTJNVXd4VFJDZkF4ampCU2dLTWdZVklwcG9sZ28"
            },
            "hasSubnews": false
        },
        {
            "title": "Want to Live a Long Life? This 95-Year-Old SuperAger Shares Her Secrets",
            "snippet": "SuperAger Sally Froelich says following a few simple lifestyle habits has helped her live a long and healthy life.",
            "publisher": "Healthline",
            "timestamp": "1722989702000",
            "newsUrl": "https://www.healthline.com/health-news/superager-tips-long-life",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVlMWFJUTkZSVVVsOXlSRWRoVFJDZkF4ampCU2dLTWdZZElJb3BsZ2s=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVlMWFJUTkZSVVVsOXlSRWRoVFJDZkF4ampCU2dLTWdZZElJb3BsZ2s"
            },
            "hasSubnews": false
        },
        {
            "title": "Rabid Bat Identified In Livingston County",
            "snippet": "Jessica Mathews / news@whmi.com. A bat in Livingston County has tested positive for rabies. The bat, found in Brighton, is the first rabies-positive animal ...",
            "publisher": "WHMI",
            "timestamp": "1722933244000",
            "newsUrl": "https://www.whmi.com/news/article/livingston-rabies-bat",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVBjQzFsT1ZWRWFURldNSGN4VFJDd0FSaWVBaWdCTWdhTldJeW1KZ1U=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVBjQzFsT1ZWRWFURldNSGN4VFJDd0FSaWVBaWdCTWdhTldJeW1KZ1U"
            },
            "hasSubnews": false
        },
        {
            "title": "How to reduce the risk of developing dementia",
            "snippet": "Some of the best strategies for reducing the chances of developing dementia are, to put it kindly, impracticable: don't grow old; don't be a woman; ...",
            "publisher": "The Economist",
            "timestamp": "1722875174000",
            "newsUrl": "https://www.economist.com/science-and-technology/2024/08/05/how-to-reduce-the-risk-of-developing-dementia",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUdYMGxOWnpnd2JVeG9OelZUVFJDZkF4ampCU2dLTWdhZEJJcVBpUXM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUdYMGxOWnpnd2JVeG9OelZUVFJDZkF4ampCU2dLTWdhZEJJcVBpUXM"
            },
            "hasSubnews": false
        },
        {
            "title": "COVID-19 sees summertime surge",
            "snippet": "Summertime weather is great for travel and outdoor fun but doctors say the increase in activity leads to an increase in COVID-19 cases.",
            "publisher": "WLNS",
            "timestamp": "1722900376000",
            "newsUrl": "https://www.wlns.com/news/covid-19-sees-summertime-surge/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNDVUV2xUUlZweVEzTXpTazloVFJERUF4aW5CU2dLTWdZcFlwSlByUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNDVUV2xUUlZweVEzTXpTazloVFJERUF4aW5CU2dLTWdZcFlwSlByUWM"
            },
            "hasSubnews": false
        },
        {
            "title": "'It can change your whole world': Sylvan Lake man battling long COVID four years after contracting virus",
            "snippet": "America is experiencing a summer surge of COVID, driven by a new variant, and some are still affected by long COVID.",
            "publisher": "WXYZ 7 Action News Detroit",
            "timestamp": "1722928860000",
            "newsUrl": "https://www.wxyz.com/news/voices/it-can-change-your-whole-world-sylvan-lake-man-battling-long-covid-four-years-after-contracting-virus",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNDFaMUJaVFhjME5YQkJaVlpFVFJDdkFSaWZBaWdCTWdZMVpKU1FyUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNDFaMUJaVFhjME5YQkJaVlpFVFJDdkFSaWZBaWdCTWdZMVpKU1FyUWM"
            },
            "hasSubnews": false
        },
        {
            "title": "Valley fever: A soil fungus that can kill is on the rise in California",
            "snippet": "About 80 Californians die every year after contracting Valley fever, a fungal disease that typically affects the lungs. A recent outbreak was traced to a ...",
            "publisher": "KTVU FOX 2 San Francisco",
            "timestamp": "1722958481000",
            "newsUrl": "https://www.ktvu.com/news/valley-fever-soil-fungus-can-kill-is-rise-california",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNTFTR0UzYXkxd1IyUk1aV05HVFJDZ0F4amhCU2dLTWdhdFZZaXVwUWc=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNTFTR0UzYXkxd1IyUk1aV05HVFJDZ0F4amhCU2dLTWdhdFZZaXVwUWc"
            },
            "hasSubnews": false
        },
        {
            "title": "Revealed: How Ozempic can make you pile on MORE weight after you stop taking it",
            "snippet": "When the U.S. comedian and influencer Claudia Oshry, now 30, came off the weight-loss drug Ozempic after a year, she experienced something she certainly ...",
            "publisher": "Daily Mail",
            "timestamp": "1722907018000",
            "newsUrl": "https://www.dailymail.co.uk/health/article-13711105/Doctors-reveal-shocking-consequence-taking-Ozempic-no-one-talks-happens-stop.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNHliblZhWm1SNFdsQkxMV2s0VFJELUFoajhCQ2dLTWdZQkFaQ21pZ3M=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNHliblZhWm1SNFdsQkxMV2s0VFJELUFoajhCQ2dLTWdZQkFaQ21pZ3M"
            },
            "hasSubnews": false
        },
        {
            "title": "One Group of People Might Benefit From Taking Fish Oil to Slow Alzheimer's",
            "snippet": "Adding fish oil to your daily diet has been shown to have a variety of benefits on mood, brain health, and reducing the risk of developing brain lesions ...",
            "publisher": "ScienceAlert",
            "timestamp": "1722917096000",
            "newsUrl": "https://www.sciencealert.com/one-group-of-people-might-benefit-from-taking-fish-oil-to-slow-alzheimers",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNW5WWFJaWDBWVFpuRXdjek5aVFJDRUFoaUNCU2dLTWdhaEE1S09NUVk=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNW5WWFJaWDBWVFpuRXdjek5aVFJDRUFoaUNCU2dLTWdhaEE1S09NUVk"
            },
            "hasSubnews": false
        },
        {
            "title": "Alzheimer's Breakthrough as Parkinson's Drug Surprise Teases New Treatment",
            "snippet": "Scientists have identified a potential new target for treating Alzheimer's disease that works by restoring the brain's own \"self-cleanup\" process.",
            "publisher": "Newsweek",
            "timestamp": "1722967201000",
            "newsUrl": "https://www.newsweek.com/alzheimers-breakthrough-parkinsons-drug-treatment-1935163",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iMkNnNXplbTkyYURSdWN6SjBiazlwVFJEZ0F4aUFCU2dLTWdzQmdvb0l1YVJFUzFxd1RB=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iMkNnNXplbTkyYURSdWN6SjBiazlwVFJEZ0F4aUFCU2dLTWdzQmdvb0l1YVJFUzFxd1RB"
            },
            "hasSubnews": false
        },
        {
            "title": "Texas man hospitalized from WATER poisoning after drinking 3 gallons too fast sparked health crisis",
            "snippet": "John Putnam (left), 74, of Round Rock, Texas, suffered water toxicity after drinking three gallons of water within five hours on a hot summer day.",
            "publisher": "Daily Mail",
            "timestamp": "1722957501000",
            "newsUrl": "https://www.dailymail.co.uk/health/article-13714529/texas-man-rushed-hospital-water-toxicity-heart-attack.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVplV2x1VUVGTmVVTnVVRTFXVFJDZkF4ampCU2dLTWdhZEVZSXBEZ3M=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVplV2x1VUVGTmVVTnVVRTFXVFJDZkF4ampCU2dLTWdhZEVZSXBEZ3M"
            },
            "hasSubnews": false
        },
        {
            "title": "Was Ozempic Right For Me?",
            "snippet": "My doctor suggested Mounjaro, a similar but different drug to Ozempic, almost a year ago. Sitting in one of the two patient chairs beside the exam table, ...",
            "publisher": "www.autostraddle.com",
            "timestamp": "1722960110000",
            "newsUrl": "https://www.autostraddle.com/was-ozempic-right-for-me/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNWhUM2xLUzBWeVpXRTRVRUl5VFJDZkF4ampCU2dLTWdhTlVaekhwQWs=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNWhUM2xLUzBWeVpXRTRVRUl5VFJDZkF4ampCU2dLTWdhTlVaekhwQWs"
            },
            "hasSubnews": false
        },
        {
            "title": "More infectious variant pushing CT COVID numbers higher; hospitalizations up",
            "snippet": "Hospitalizations for COVID-19 have risen, even after the annual summer surge, driven by an infectious variant.",
            "publisher": "Hartford Courant",
            "timestamp": "1722938174000",
            "newsUrl": "https://www.courant.com/2024/08/06/more-infectious-variant-pushing-ct-covid-numbers-higher-hospitalizations-up/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNTNjM1l0VUVjMFEwdDVWalF3VFJEZUFoaUdCQ2dLTWdhWkJZTHJEUWs=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNTNjM1l0VUVjMFEwdDVWalF3VFJEZUFoaUdCQ2dLTWdhWkJZTHJEUWs"
            },
            "hasSubnews": false
        },
        {
            "title": "Oregon measles outbreak records at least 23 cases since June",
            "snippet": "Oregon reports 23 measles cases in three counties since June 2024. Unvaccinated individuals at risk. Measles symptoms and prevention tips.",
            "publisher": "KOIN.com",
            "timestamp": "1722963770000",
            "newsUrl": "https://www.koin.com/news/oregon/measles-outbreak-clackamas-marion-multnomah/",
            "hasSubnews": false
        },
        {
            "title": "‘Relentless’ new COVID variants extend California’s summer wave",
            "snippet": "Health experts warn that emerging coronavirus variants pose a greater challenge than previous strains, prolonging California's summer COVID-19 wave.",
            "publisher": "San Francisco Chronicle",
            "timestamp": "1722909203000",
            "newsUrl": "https://www.sfchronicle.com/health/article/california-covid-variants-flirt-19621268.php",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNW5NbTFNVW5SUmFtdFpOVTFuVFJERUF4aW1CU2dLTWdrSmdJeDFzT1o2Y0FF=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNW5NbTFNVW5SUmFtdFpOVTFuVFJERUF4aW1CU2dLTWdrSmdJeDFzT1o2Y0FF"
            },
            "hasSubnews": false
        },
        {
            "title": "Access is unequal to weight-loss drugs Ozempic and Wegovy: study",
            "snippet": "Prescriptions for blockbuster drugs that treat diabetes, obesity and heart disease are soaring, but the mix of payers shows access to the drugs is far from ...",
            "publisher": "Axios",
            "timestamp": "1722924490000",
            "newsUrl": "https://www.axios.com/2024/08/05/ozempic-wegovy-semaglutide-equity-access",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUZjRkZrYTNkR1RreFpXV2w2VFJEQUFoakFBaWdLTWdZQkFLeEFDZ3c=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUZjRkZrYTNkR1RreFpXV2w2VFJEQUFoakFBaWdLTWdZQkFLeEFDZ3c"
            },
            "hasSubnews": false
        },
        {
            "title": "Super strict 900 calorie diet offered by NHS can reverse type 2 diabetes",
            "snippet": "A groundbreaking diet through the NHS can reverse type 2 diabetes in thousands of people diagnosed with the condition, according to new research.",
            "publisher": "LADbible",
            "timestamp": "1722945736000",
            "newsUrl": "https://www.ladbible.com/news/health/nhs-uk-type-2-diabetes-reverse-food-drink-806497-20240806",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNUhkVkZVUTFGMFUyVTVkRFJhVFJDZkF4ampCU2dLTWdrSlFwTEZIcWs5elFF=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNUhkVkZVUTFGMFUyVTVkRFJhVFJDZkF4ampCU2dLTWdrSlFwTEZIcWs5elFF"
            },
            "hasSubnews": false
        },
        {
            "title": "Colon Cancer: Regular Aspirin Use May Lower Risk",
            "snippet": "People who use aspirin regularly have a lower risk of colorectal cancer compared to those who don't use aspirin regularly, a new study shows.",
            "publisher": "Healthline",
            "timestamp": "1722888253000",
            "newsUrl": "https://www.healthline.com/health-news/aspirin-use-may-lower-colon-cancer-risk",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNU1TbE5KWjJ0Q1lYUktiRkl4VFJDZkF4ampCU2dLTWdZMVZJaHdwUWc=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNU1TbE5KWjJ0Q1lYUktiRkl4VFJDZkF4ampCU2dLTWdZMVZJaHdwUWc"
            },
            "hasSubnews": false
        },
        {
            "title": "Whooping cough is spiking in Alaska, health authorities say",
            "snippet": "Alaska has seen roughly five times more reported cases of whooping cough so far this year than in all of last year, according to the state Department of ...",
            "publisher": "Anchorage Daily News",
            "timestamp": "1723002485000",
            "newsUrl": "https://www.adn.com/alaska-news/2024/08/06/whooping-cough-is-spiking-in-alaska-health-authorities-say/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUhWa3hMUlVWMlFVMHlhWEUyVFJDakFSaTJBaWdCTWdhNUFaYTJCQW8=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUhWa3hMUlVWMlFVMHlhWEUyVFJDakFSaTJBaWdCTWdhNUFaYTJCQW8"
            },
            "hasSubnews": false
        },
        {
            "title": "The #1 Reason Why You May Be Gaining Weight Despite Working Out & Eating Healthier",
            "snippet": "Discover the number one reason why starting a new fitness routine and eating healthier may cause you to gain weight.",
            "publisher": "EatingWell",
            "timestamp": "1722972668000",
            "newsUrl": "https://www.eatingwell.com/reason-for-gain-weight-from-exercise-and-healthy-eating-8691199",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNWhhRVZTYkRad2NFeFNTRGxmVFJESEF4aWlCU2dLTWdrTkVwZ3lsYXFwcFFJ=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNWhhRVZTYkRad2NFeFNTRGxmVFJESEF4aWlCU2dLTWdrTkVwZ3lsYXFwcFFJ"
            },
            "hasSubnews": false
        },
        {
            "title": "Bone-building drug recommended to women past the menopause",
            "snippet": "Tens of thousands of women who have gone through the menopause might benefit from a new bone-strengthening drug, says the medicines watchdog National ...",
            "publisher": "BBC.com",
            "timestamp": "1723017150000",
            "newsUrl": "https://www.bbc.com/news/articles/ckg22prg9y0o",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNDNTVUYyWm1oalpISmFjRFJsVFJDZkF4ampCU2dLTWdZbEJZQ1BCUXc=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNDNTVUYyWm1oalpISmFjRFJsVFJDZkF4ampCU2dLTWdZbEJZQ1BCUXc"
            },
            "hasSubnews": false
        },
        {
            "title": "Researchers create new treatment and vaccine for flu and various coronaviruses",
            "snippet": "A team of researchers, led by the University of Houston, has discovered two new ways of preventing and treating respiratory viruses.",
            "publisher": "Medical Xpress",
            "timestamp": "1722958786000",
            "newsUrl": "https://medicalxpress.com/news/2024-08-treatment-vaccine-flu-coronaviruses.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNDNUR1pWUTBSWGNWTTFhRWhxVFJEZ0F4aUFCU2dLTWdhcEZZck5OUVU=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNDNUR1pWUTBSWGNWTTFhRWhxVFJEZ0F4aUFCU2dLTWdhcEZZck5OUVU"
            },
            "hasSubnews": false
        },
        {
            "title": "Treat or Train? Orexin Helps Brain Decide",
            "snippet": "Researchers have identified orexin, a brain chemical, as crucial in deciding between exercising and indulging in treats.",
            "publisher": "Neuroscience News",
            "timestamp": "1722979690000",
            "newsUrl": "https://neurosciencenews.com/orexin-diet-exercise-decision-27525/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVFRMHRqUldGRE1WVjRWbE5yVFJEM0FSanlBaWdLTWdZQllJaHJLUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVFRMHRqUldGRE1WVjRWbE5yVFJEM0FSanlBaWdLTWdZQllJaHJLUWM"
            },
            "hasSubnews": false
        },
        {
            "title": "Cutting Out This Food from Your Diet Could Significantly Reduce Dementia Risk",
            "snippet": "Recent studies indicate that consuming certain types of food may significantly increase the risk of developing dementia. This discovery adds to the growing ...",
            "publisher": "The Daily Galaxy --Great Discoveries Channel",
            "timestamp": "1722951930000",
            "newsUrl": "https://dailygalaxy.com/2024/08/cutting-out-food-diet-reduce-dementia-risk/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNTBOV3h5TUd0UWJFaFJhVVJ3VFJDdkF4akhCU2dLTWdhTkFvWUloUVE=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNTBOV3h5TUd0UWJFaFJhVVJ3VFJDdkF4akhCU2dLTWdhTkFvWUloUVE"
            },
            "hasSubnews": false
        },
        {
            "title": "Incurable lung disease linked to ‘trendy’ quartz kitchen counters",
            "snippet": "The growing popularity of artificial stone or “quartz” kitchen worktops in Britain has brought an increased risk of severe and incurable lung disease for ...",
            "publisher": "The Times",
            "timestamp": "1722983400000",
            "newsUrl": "https://www.thetimes.com/uk/healthcare/article/incurable-lung-disease-linked-to-trendy-quartz-kitchen-counters-x7rlrlds0",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNU9WVk5HUTFabFRTMTBUV05GVFJDZkF4ampCU2dLTWdZQlFJcVdIQVU=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNU9WVk5HUTFabFRTMTBUV05GVFJDZkF4ampCU2dLTWdZQlFJcVdIQVU"
            },
            "hasSubnews": false
        },
        {
            "title": "Positive COVID tests on the rise in Lincoln",
            "snippet": "Reports from the ...",
            "publisher": "KOLN",
            "timestamp": "1722963300000",
            "newsUrl": "https://www.1011now.com/2024/08/06/positive-covid-tests-rise-lincoln/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNHdPR3BVYUhCaE9HVnBjblF5VFJDSEF4aVBCaWdLTWdNeFJBWQ=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNHdPR3BVYUhCaE9HVnBjblF5VFJDSEF4aVBCaWdLTWdNeFJBWQ"
            },
            "hasSubnews": false
        },
        {
            "title": "‘Tadpole water’ is Gen Z’s latest weight loss hack: ‘It makes me gag, but it’s worth it’",
            "snippet": "On TikTok, Gen Z dieters are raving over the weight loss perks of \"tadpole water,\" a blend of chia seeds, warm water and lemon, which is named for its stark ...",
            "publisher": "New York Post ",
            "timestamp": "1722959340000",
            "newsUrl": "https://nypost.com/2024/08/06/lifestyle/tadpole-water-is-gen-zs-latest-weight-loss-hack-it-makes-me-gag-but-its-worth-it/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXVVV1JEVEhwMGEwbHpXRWhwVFJDY0FSanFBU2dLTWdhSlU0YUZwZ2M=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXVVV1JEVEhwMGEwbHpXRWhwVFJDY0FSanFBU2dLTWdhSlU0YUZwZ2M"
            },
            "hasSubnews": false
        },
        {
            "title": "Women with borderline personality disorder experience heightened dissociation symptoms in sexual situations",
            "snippet": "A study of women with borderline personality disorder in Germany found that they experience heightened dissociative symptoms in sexual situations.",
            "publisher": "PsyPost",
            "timestamp": "1722960366000",
            "newsUrl": "https://www.psypost.org/women-with-borderline-personality-disorder-experience-heightened-dissociation-symptoms-in-sexual-situations/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNDRSV2xTVlhCWE4zRmlSbU5GVFJDSEF4aVBCaWdLTWdhNUU1QlJsUWc=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNDRSV2xTVlhCWE4zRmlSbU5GVFJDSEF4aVBCaWdLTWdhNUU1QlJsUWc"
            },
            "hasSubnews": false
        },
        {
            "title": "Long-term benzodiazepine use linked to shrinkage in two brain regions",
            "snippet": "Long-term benzodiazepine use is not linked to increased dementia risk, but it is associated with reduced volumes in the hippocampus and amygdala, ...",
            "publisher": "PsyPost",
            "timestamp": "1722880958000",
            "newsUrl": "https://www.psypost.org/long-term-benzodiazepine-use-linked-to-shrinkage-in-two-brain-regions/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iMkNnNURUV2hRUTBVMWQycHhlVWRJVFJDSEF4aVBCaWdLTWdzQkFJUUFtU042UTl0VUxn=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iMkNnNURUV2hRUTBVMWQycHhlVWRJVFJDSEF4aVBCaWdLTWdzQkFJUUFtU042UTl0VUxn"
            },
            "hasSubnews": false
        },
        {
            "title": "Keto diet study shows increased LDL cholesterol, higher apolipoprotein B and reduced gut bacteria",
            "snippet": "A team of health and nutrition specialists at the University of Bath, working with colleagues from the University of Bristol, the Oxford University Hospital ...",
            "publisher": "Medical Xpress",
            "timestamp": "1722958240000",
            "newsUrl": "https://medicalxpress.com/news/2024-08-keto-diet-ldl-cholesterol-higher.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXpNWFZVT0c5UFIweFlUMUJZVFJDcUJCaXFCQ2dLTWdZRkFZNkVrQW8=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXpNWFZVT0c5UFIweFlUMUJZVFJDcUJCaXFCQ2dLTWdZRkFZNkVrQW8"
            },
            "hasSubnews": false
        },
        {
            "title": "This Cucumber Cream Cheese Roll Is a Fun Appetizer You'll Want to Try",
            "snippet": "Try this refreshing cucumber cream cheese roll as an easy appetizer. We wrap thin slices of cucumber around cream cheese mixed with fresh chives and dill.",
            "publisher": "EatingWell",
            "timestamp": "1722959811000",
            "newsUrl": "https://www.eatingwell.com/cucumber-cream-cheese-roll-8660948",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNWllRFZLYnpSeVFWTmhTR3N6VFJDcUJCaXFCQ2dLTWdrQklJekxQV1d4S1FJ=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNWllRFZLYnpSeVFWTmhTR3N6VFJDcUJCaXFCQ2dLTWdrQklJekxQV1d4S1FJ"
            },
            "hasSubnews": false
        },
        {
            "title": "New gut microbiome discovery: Sodium valerate could be key to reducing alcohol abuse",
            "snippet": "In a groundbreaking study, researchers at The Jackson Laboratory and UConn Health have discovered that sodium valerate, a short-chain fatty acid produced by ...",
            "publisher": "PsyPost",
            "timestamp": "1722953313000",
            "newsUrl": "https://www.psypost.org/new-gut-microbiome-discovery-sodium-valerate-could-be-key-to-reducing-alcohol-abuse/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXNMVlIyVEVGd01Fc3RaRmxYVFJDSEF4aVBCaWdLTWdhQkU0TmkxZ0U=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXNMVlIyVEVGd01Fc3RaRmxYVFJDSEF4aVBCaWdLTWdhQkU0TmkxZ0U"
            },
            "hasSubnews": false
        },
        {
            "title": "If your child picks up one of these in the woods, take them to a doctor immediately",
            "snippet": "Residents of upstate New York may find small green packets in their backyards this month. They contain an oral rabies vaccine for wildlife, and officials ...",
            "publisher": "Daily Mail",
            "timestamp": "1722954752000",
            "newsUrl": "https://www.dailymail.co.uk/sciencetech/article-13714273/If-child-picks-one-woods-doctor-immediately.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNHllRTQzVG1ReFIwdGZTbGhyVFJDZkF4ampCU2dLTWdtWllvd1NLYWlTREFJ=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNHllRTQzVG1ReFIwdGZTbGhyVFJDZkF4ampCU2dLTWdtWllvd1NLYWlTREFJ"
            },
            "hasSubnews": false
        },
        {
            "title": "Updated COVID Vaccines Are Coming: Effectiveness, Who’s Eligible And More",
            "snippet": "Drug manufacturers have created updated monovalent COVID-19 vaccines to protect against currently circulating variants, and the shots—which have shown to be ...",
            "publisher": "Forbes",
            "timestamp": "1722888909000",
            "newsUrl": "https://www.forbes.com/sites/ariannajohnson/2024/08/05/updated-covid-vaccines-are-coming-effectiveness-whos-eligible-and-more/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNUxibm81TjJ0TExVcHVObmxWVFJDUEF4akdCU2dLTWdNQkJSNA=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNUxibm81TjJ0TExVcHVObmxWVFJDUEF4akdCU2dLTWdNQkJSNA"
            },
            "hasSubnews": false
        },
        {
            "title": "I Replaced Regular Walks With ‘Rucking’ for 2 Weeks & Saw My Endurance Skyrocket",
            "snippet": "A personal trainer swapped out his regular walks for rucking for two weeks and outlines his journey, benefits, and potential drawbacks.",
            "publisher": "Eat This, Not That",
            "timestamp": "1722953327000",
            "newsUrl": "https://www.eatthis.com/experience-rucking-for-two-weeks/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNUVSVzh6YjFsdVdUQkZUbXBqVFJEYUF4aUhCU2dLTWdrWk01SXBudWxNaUFJ=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNUVSVzh6YjFsdVdUQkZUbXBqVFJEYUF4aUhCU2dLTWdrWk01SXBudWxNaUFJ"
            },
            "hasSubnews": false
        },
        {
            "title": "Teflon Flu: What Is It and What Cooking Precautions Can You Take?",
            "snippet": "Teflon flu cases are on the rise, but should you be concerned? Here are expert tips to eliminate your risk when using nonstick cookware.",
            "publisher": "CNET",
            "timestamp": "1722971033000",
            "newsUrl": "https://www.cnet.com/home/kitchen-and-household/teflon-flu-what-is-it-risks-and-cooking-precautions-you-can-take/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVhYMmRHVVROTE0zaEhXSEJoVFJEZ0F4aUFCU2dLTWdZWkFJNEpQZ1U=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVhYMmRHVVROTE0zaEhXSEJoVFJEZ0F4aUFCU2dLTWdZWkFJNEpQZ1U"
            },
            "hasSubnews": false
        },
        {
            "title": "Bread with sprouted grains offers 'enhanced nutritional profile,' may be healthier way to enjoy carbs",
            "snippet": "Are sprouted grains nutritionally better for you? Food experts shared the benefits, potential drawbacks and more for this trendy and potential bread ...",
            "publisher": "Fox News",
            "timestamp": "1722937800000",
            "newsUrl": "https://www.foxnews.com/food-drink/bread-sprouted-grains-enhanced-nutritional-profile-healthier-way-enjoy-carbs",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVRka3RMZGpKbU9UVnFOVUZxVFJDZkF4ampCU2dLTWdZQllJYld0QU0=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVRka3RMZGpKbU9UVnFOVUZxVFJDZkF4ampCU2dLTWdZQllJYld0QU0"
            },
            "hasSubnews": false
        },
        {
            "title": "Type 2 diabetes: Too much time sitting linked to early death",
            "snippet": "A sedentary lifestyle that includes a lot of time sitting may lead to a higher risk of all-cause mortality among adults with type 2 diabetes, a study finds.",
            "publisher": "Medical News Today",
            "timestamp": "1722891827000",
            "newsUrl": "https://www.medicalnewstoday.com/articles/type-2-diabetes-sitting-time-sedentary-lifestyle-higher-mortality-risk",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNHhjRVJQUTNSeFFuaDBhMFozVFJDZkF4ampCU2dLTWdZdEZaYXVGUW8=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNHhjRVJQUTNSeFFuaDBhMFozVFJDZkF4ampCU2dLTWdZdEZaYXVGUW8"
            },
            "hasSubnews": false
        },
        {
            "title": "Memphis mother searching for answers after son killed in South Memphis",
            "snippet": "Four months after her son was shot and killed in South Memphis, a mother is still searching for answers.",
            "publisher": "FOX13 Memphis",
            "timestamp": "1722979932000",
            "newsUrl": "https://www.fox13memphis.com/news/memphis-mother-searching-for-answers-after-son-killed-in-south-memphis/article_7a1b664e-5434-11ef-8d2d-efe185ce25fe.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNDVhSEYxUzJkcmRuWlZZblJYVFJDZkF4ampCU2dLTWdZdGhZS3VzUVk=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNDVhSEYxUzJkcmRuWlZZblJYVFJDZkF4ampCU2dLTWdZdGhZS3VzUVk"
            },
            "hasSubnews": false
        },
        {
            "title": "7-Day High-Fiber Mediterranean Diet Meal Plan for High Blood Pressure, Created by a Dietitian",
            "snippet": "If you're looking to improve your blood pressure, this 7-day high-fiber Mediterranean diet meal plan can help.",
            "publisher": "EatingWell",
            "timestamp": "1722887650000",
            "newsUrl": "https://www.eatingwell.com/7-day-high-fiber-mediterranean-diet-meal-plan-for-high-blood-pressure-8690534",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iL0NnNXJaR2xpUlVnd1MwZG9jSE15VFJESEF4aWlCU2dLTWdtTlFZd0dwU1k5VXdF=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iL0NnNXJaR2xpUlVnd1MwZG9jSE15VFJESEF4aWlCU2dLTWdtTlFZd0dwU1k5VXdF"
            },
            "hasSubnews": false
        },
        {
            "title": "Mosquitoes in Grand Isle and Franklin counties test positive for EEE virus",
            "snippet": "Mosquitoes in Alburgh and Swanton have tested positive for eastern equine encephalitis virus, according to a Friday press release from the Vermont ...",
            "publisher": "VTDigger",
            "timestamp": "1722892300000",
            "newsUrl": "https://vtdigger.org/2024/08/05/mosquitoes-in-grand-isle-and-franklin-counties-test-positive-for-eee-virus/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUZZV1pvTWpOU2RFNVdVM2RTVFJERUF4aW1CU2dLTWdZaGhaYk5zUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUZZV1pvTWpOU2RFNVdVM2RTVFJERUF4aW1CU2dLTWdZaGhaYk5zUWM"
            },
            "hasSubnews": false
        },
        {
            "title": "Seaweed Antioxidants Show Promise in Preventing Parkinson’s",
            "snippet": "Researchers have found that antioxidants from Ecklonia cava, a type of seaweed, may help prevent Parkinson's disease by protecting dopamine-producing ...",
            "publisher": "Neuroscience News",
            "timestamp": "1722892488000",
            "newsUrl": "https://neurosciencenews.com/seaweed-antioxidants-parkinsons-27520/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXNObEJNTVhvM1RtTnVVVko2VFJERUF4aW1CU2dLTWdhQlFwQ3FLUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXNObEJNTVhvM1RtTnVVVko2VFJERUF4aW1CU2dLTWdhQlFwQ3FLUWM"
            },
            "hasSubnews": false
        },
        {
            "title": "Regular poor sleep linked to wide range of chronic health problems",
            "snippet": "A team of medical researchers affiliated with a host of institutions across the U.S. has found via a study of Fitbit data that people who regularly sleep ...",
            "publisher": "Medical Xpress",
            "timestamp": "1722866501000",
            "newsUrl": "https://medicalxpress.com/news/2024-08-regular-poor-linked-wide-range.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNXZabkpOZEdJNGJFOHdNMjlLVFJEREF4aW9CU2dLTWdPRlVoUQ=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNXZabkpOZEdJNGJFOHdNMjlLVFJEREF4aW9CU2dLTWdPRlVoUQ"
            },
            "hasSubnews": false
        },
        {
            "title": "University of Utah math professor publishes model to explain cancer development",
            "snippet": "A University of Utah professor is bringing mathematics into even more real-world applications, taking steps toward explaining cancer.",
            "publisher": "KSL.com",
            "timestamp": "1722946979000",
            "newsUrl": "https://www.ksl.com/article/51087737/university-of-utah-math-professor-publishes-model-to-explain-cancer-development",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNUNNVXcwZEhOM2NrbHhVVkZoVFJDZkF4ampCU2dLTWdZRlNJTmw0Z0k=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNUNNVXcwZEhOM2NrbHhVVkZoVFJDZkF4ampCU2dLTWdZRlNJTmw0Z0k"
            },
            "hasSubnews": false
        },
        {
            "title": "A Man’s Rapid Weight Loss From Obesity Drug Led to Heart Problems",
            "snippet": "A case report highlights the danger of mixing certain medications with the newest generation of weight-loss drugs.",
            "publisher": "Gizmodo",
            "timestamp": "1722960594000",
            "newsUrl": "https://gizmodo.com/a-mans-rapid-weight-loss-from-obesity-drug-led-to-heart-problems-2000483591",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVJTMjFKVDBkdlRXTmFSRk5FVFJERUF4aW1CU2dLTWdZUkk0NXJvUWc=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVJTMjFKVDBkdlRXTmFSRk5FVFJERUF4aW1CU2dLTWdZUkk0NXJvUWc"
            },
            "hasSubnews": false
        },
        {
            "title": "A new drug could turn back the clock on multiple sclerosis",
            "snippet": "Multiple sclerosis (MS) degrades the protective insulation around nerve cells, leaving their axons, which carry electrical impulses, exposed like bare wires ...",
            "publisher": "Medical Xpress",
            "timestamp": "1722882252000",
            "newsUrl": "https://medicalxpress.com/news/2024-08-drug-clock-multiple-sclerosis.html",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNDFTVGxmWVU5aVpWUTRZM3BmVFJEWkJCai1BeWdLTWdNQk1BZw=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNDFTVGxmWVU5aVpWUTRZM3BmVFJEWkJCai1BeWdLTWdNQk1BZw"
            },
            "hasSubnews": false
        },
        {
            "title": "Diet and aging: How does sugar intake influence aging processes?",
            "snippet": "Recent research links diets high in sugar with increased epigenetic aging in women, and suggests that, conversely, diets high in antioxidants or ...",
            "publisher": "Medical News Today",
            "timestamp": "1722865975000",
            "newsUrl": "https://www.medicalnewstoday.com/articles/high-sugar-intake-may-precipitate-aging-antioxidant-rich-diet-may-slow-it-down",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iJ0NnNHRZbUZITVcwNVdIQkpZVEZ6VFJDZkF4ampCU2dLTWdPbEJBbw=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iJ0NnNHRZbUZITVcwNVdIQkpZVEZ6VFJDZkF4ampCU2dLTWdPbEJBbw"
            },
            "hasSubnews": false
        },
        {
            "title": "COVID-19 making worrying comeback WHO warns, amid summertime surge",
            "snippet": "COVID-19 infections are surging worldwide - including at the Olympics - and are unlikely to decline anytime soon, the World Health Organization (WHO) warned ...",
            "publisher": "UN News",
            "timestamp": "1722954097000",
            "newsUrl": "https://news.un.org/en/story/2024/08/1152866",
            "hasSubnews": false
        },
        {
            "title": "Drinking Cranberry Juice Has An Unexpected Effect On A Man's Prostate Health",
            "snippet": "There are many health benefits to drinking cranberry juice. But as it turns out, there's an important reason why men might want to include it in their diet.",
            "publisher": "Health Digest",
            "timestamp": "1722886255000",
            "newsUrl": "https://www.healthdigest.com/1634581/drinking-cranberry-juice-has-unexpected-effect-on-mens-prostate/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNW1NVkJ3T0VsMFRYUm5SM0UzVFJDZkF4ampCU2dLTWdZZEE0UlB3UU0=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNW1NVkJ3T0VsMFRYUm5SM0UzVFJDZkF4ampCU2dLTWdZZEE0UlB3UU0"
            },
            "hasSubnews": false
        },
        {
            "title": "When a child is mysteriously and seriously ill, here are places to turn",
            "snippet": "Rare diseases most often emerge in childhood, yet getting a diagnosis can take up to nine years, and many children die by age 5.",
            "publisher": "The Washington Post",
            "timestamp": "1722880849000",
            "newsUrl": "https://www.washingtonpost.com/wellness/2024/08/05/children-rare-diseases-undiagnosed-network/",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNVpiVnByWmxnMk9VTlJSbmR3VFJES0F4aWVCU2dLTWdhZE01Q3JtUWM=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNVpiVnByWmxnMk9VTlJSbmR3VFJES0F4aWVCU2dLTWdhZE01Q3JtUWM"
            },
            "hasSubnews": false
        },
        {
            "title": "Jeremy Renner Just Told Us His Morning Routine, Including His Go-To High-Protein Breakfast",
            "snippet": "In this exclusive interview, 'Hawkeye' star Jeremy Renner shares more on recovering from his snowplow accident, how he focuses on protein and more.",
            "publisher": "EatingWell",
            "timestamp": "1722896641000",
            "newsUrl": "https://www.eatingwell.com/jeremy-renner-morning-routine-interview-8690645",
            "images": {
                "thumbnail": "https://news.google.com/api/attachments/CC8iK0NnNXBTa2haVVZwbGRWTlRkVkJXVFJESEF4aWlCU2dLTWdZcFJaak9vUWc=-w280-h168-p-df-rw",
                "thumbnailProxied": "https://i.zedtranslate.com/newsimage/CC8iK0NnNXBTa2haVVZwbGRWTlRkVkJXVFJESEF4aWlCU2dLTWdZcFJaak9vUWc"
            },
            "hasSubnews": false
        }
    ]
}","status":200,"url":"https://google-news13.p.rapidapi.com/health?lr=en-US"},"revalidate":31536000,"tags":[]}